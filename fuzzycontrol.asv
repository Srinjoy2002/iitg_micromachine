function motorCameraSimulation
    %% Global Timer Variables (declared at top for proper scope)
    global scanTimer captureTimer
    scanTimer = [];
    captureTimer = [];
    
    %% Create GUI
    fig = uifigure('Name','Motor-Camera System Simulation','Position',[100,100,1000,600]);
    
    % Axes for simulated camera image
    axImage = uiaxes(fig, 'Position',[50,250,400,300]);
    title(axImage, 'Simulated Camera Image');
    
    % Axes for linear stage (vertical line with marker)
    axStage = uiaxes(fig, 'Position',[500,250,150,300]);
    title(axStage, 'Linear Stage Position');
    xlabel(axStage, 'Stage');
    ylabel(axStage, 'Position (microns)');
    axStage.XLim = [0 1];
    axStage.YLim = [0 1000];
    hold(axStage, 'on');
    % Draw a vertical line representing the stage:
    plot(axStage, [0.5 0.5], [0 1000], 'k-', 'LineWidth',2);
    stageMarker = plot(axStage, 0.5, 0, 'ro', 'MarkerSize',12, 'MarkerFaceColor','r');
    
    % Labels for UB, LB, and Encoder reading
    lblUB = uilabel(fig, 'Position',[700,500,250,30], 'Text','Upper Bound (UB): TBD');
    lblLB = uilabel(fig, 'Position',[700,460,250,30], 'Text','Lower Bound (LB): TBD');
    lblEncoder = uilabel(fig, 'Position',[700,420,250,30], 'Text','Encoder: 0.0 microns');
    
    % Buttons to start scan and capture phases
    btnScan = uibutton(fig, 'push', 'Text','Start Scan', ...
        'Position',[50,50,150,50], 'ButtonPushedFcn', @(~,~) startScan());
    btnCapture = uibutton(fig, 'push', 'Text','Start Capture', ...
        'Position',[250,50,150,50], 'Enable','off', 'ButtonPushedFcn', @(~,~) startCapture());
    
    %% Simulation Parameters
    % For simulation, we use stage positions from 0 to 1000 microns (you can scale this up)
    stagePositions = 0:10:1000;  % Nominal 10-micron steps
    numPos = numel(stagePositions);
    % Synthetic focus metric: Gaussian profile centered at 400 microns, sigma=100.
    focusMetricFun = @(z) exp(-((z-400)/100).^2)*100;  % Focus value from 0 to ~100

    %% Build Fuzzy Inference System for Focus Determination (FocusFIS)
    fis = mamfis('Name','FocusFIS');
    % Define input "FocusMetric" from 0 to 100
    fis = addInput(fis, [0 100], 'Name', 'FocusMetric');
    fis = addMF(fis, 'FocusMetric', 'trimf', [0 0 50], 'Name', 'NotFocused');
    fis = addMF(fis, 'FocusMetric', 'trimf', [30 100 100], 'Name', 'Focused');
    % Define output "FocusDegree" from 0 to 1
    fis = addOutput(fis, [0 1], 'Name', 'FocusDegree');
    fis = addMF(fis, 'FocusDegree', 'trimf', [0 0 0.5], 'Name', 'NotFocus');
    fis = addMF(fis, 'FocusDegree', 'trimf', [0.5 1 1], 'Name', 'Focus');
    % Add rule: If FocusMetric is Focus then FocusDegree is Focus.
    ruleList = "FocusMetric==Focused => FocusDegree=Focus";
    fis = addRule(fis, ruleList);
    focusThreshold = 0.5;  % Positions with FocusDegree > 0.5 are in focus.
    
    %% Build Fuzzy Inference System for Motor Regulation (MotorFIS)
    % This FIS takes the error between commanded 10-micron step and actual move and outputs an adjustment.
    motorFIS = mamfis('Name','MotorFIS');
    motorFIS = addInput(motorFIS, [-2 2], 'Name', 'Error');  % error in microns
    motorFIS = addMF(motorFIS, 'Error', 'trimf', [-2 -2 0], 'Name', 'Negative');  % undershoot (error negative)
    motorFIS = addMF(motorFIS, 'Error', 'trimf', [-1 0 1], 'Name', 'Zero');         % near zero error
    motorFIS = addMF(motorFIS, 'Error', 'trimf', [0 2 2], 'Name', 'Positive');       % overshoot (error positive)
    motorFIS = addOutput(motorFIS, [-2 2], 'Name', 'Adjustment');  % adjustment in microns
    motorFIS = addMF(motorFIS, 'Adjustment', 'trimf', [-2 -2 0], 'Name', 'Increase'); % if error negative, increase step
    motorFIS = addMF(motorFIS, 'Adjustment', 'trimf', [-0.5 0 0.5], 'Name', 'NoChange');
    motorFIS = addMF(motorFIS, 'Adjustment', 'trimf', [0 2 2], 'Name', 'Decrease');   % if error positive, decrease step
    % Define rules:
    % If error is Negative then Adjustment is Increase (i.e., add microns)
    % If error is Zero then Adjustment is NoChange
    % If error is Positive then Adjustment is Decrease (i.e., subtract microns)
    ruleListMotor = [1 1 1 1;  % (Negative -> Increase)
                     2 2 1 1;  % (Zero -> NoChange)
                     3 3 1 1]; % (Positive -> Decrease)
    motorFIS = addRule(motorFIS, ruleListMotor);
    
    %% Variables for storing scan results
    focusValues = zeros(1, numPos);
    fuzzyOut = zeros(1, numPos);
    UB = NaN; LB = NaN;  % Upper and lower bounds
    currentScanIndex = 1;
    currentCaptureIndex = 1;
    
    %% Timer Objects for Simulation Phases (global timers already declared)
    if isempty(scanTimer) || ~isvalid(scanTimer)
        scanTimer = timer('ExecutionMode', 'fixedRate', 'Period', 0.2, 'TimerFcn', @scanStep);
    end
    if isempty(captureTimer) || ~isvalid(captureTimer)
        captureTimer = timer('ExecutionMode','fixedRate', 'Period', 0.5, 'TimerFcn', @captureStep);
    end
    
    %% Scanning Phase: Determine Focus UB and LB
    function scanStep(~,~)
        if currentScanIndex <= numPos
            z = stagePositions(currentScanIndex);
            focusVal = focusMetricFun(z);
            focusValues(currentScanIndex) = focusVal;
            fuzzyVal = evalfis(fis, focusVal);
            fuzzyOut(currentScanIndex) = fuzzyVal;
            
            % Update simulated camera image (brightness = focus measure)
            img = uint8(ones(300,400)*focusVal);
            imshow(img, 'Parent', axImage);
            title(axImage, sprintf('Scan: Z = %d microns, Focus = %.1f', z, focusVal));
            
            % Update encoder and stage marker
            lblEncoder.Text = sprintf('Encoder: %d microns', z);
            stageMarker.YData = z;
            
            currentScanIndex = currentScanIndex + 1;
        else
            % Determine UB and LB: first and last index where fuzzyOut > focusThreshold
            idxInFocus = find(fuzzyOut > focusThreshold);
            if ~isempty(idxInFocus)
                UB = stagePositions(idxInFocus(1));
                LB = stagePositions(idxInFocus(end));
            end
            lblUB.Text = sprintf('Upper Bound (UB): %.1f microns', UB);
            lblLB.Text = sprintf('Lower Bound (LB): %.1f microns', LB);
            stop(scanTimer);
            % Enable capture button if bounds valid
            if ~isnan(UB) && ~isnan(LB)
                btnCapture.Enable = 'on';
            else
                uialert(fig, 'No in-focus region detected during scan!', 'Scan Error');
            end
        end
    end

    %% Capture Phase: Move Stage from UB to LB in 10-micron steps with motor regulation
    function captureStep(~,~)
        % On first call, set currentCaptureIndex to index closest to UB:
        if currentCaptureIndex == 1
            [~, idx] = min(abs(stagePositions - UB));
            currentCaptureIndex = idx;
        end
        
        if currentCaptureIndex < numPos && stagePositions(currentCaptureIndex) < LB
            % Nominal commanded step is 10 microns
            commandedStep = 10;
            % Get the current commanded position:
            commandedPos = stagePositions(currentCaptureIndex);
            % Simulate actual motor movement error: random error between -2 and +2 microns
            randomError = -2 + 4*rand();  
            actualPos = commandedPos + commandedStep + randomError;
            % Compute error (difference between actual movement and commanded step)
            errorVal = (actualPos - commandedPos) - commandedStep;
            % Use MotorFIS to compute adjustment (in microns)
            adjustment = evalfis(motorFIS, errorVal);
            % Adjust the commanded step
            adjustedStep = commandedStep + adjustment;
            % Compute next commanded position:
            commandedPosNext = commandedPos + adjustedStep;
            
            % For simulation, update the encoder to the actual position
            lblEncoder.Text = sprintf('Encoder: %.1f microns (Error: %.2f, Adj: %.2f)', actualPos, errorVal, adjustment);
            stageMarker.YData = actualPos;
            
            % Update simulated camera image based on actual position focus metric
            focusVal = focusMetricFun(actualPos);
            img = uint8(ones(300,400)*focusVal);
            imshow(img, 'Parent', axImage);
            title(axImage, sprintf('Capture: Z = %.1f microns, Focus = %.1f', actualPos, focusVal));
            
            % Find the index of the next position in our stagePositions array closest to commandedPosNext
            [~, nextIdx] = min(abs(stagePositions - commandedPosNext));
            currentCaptureIndex = nextIdx;
        else
            stop(captureTimer);
            uialert(fig, 'Capture phase complete!', 'Done');
        end
    end

    %% Button Callback: Start Scan
    function startScan()
        currentScanIndex = 1;
        focusValues = zeros(1, numPos);
        fuzzyOut = zeros(1, numPos);
        start(scanTimer);
        btnScan.Enable = 'off';
    end

    %% Button Callback: Start Capture
    function startCapture()
        currentCaptureIndex = 1;
        start(captureTimer);
        btnCapture.Enable = 'off';
    end

end
 